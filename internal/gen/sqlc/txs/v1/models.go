// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package v1txs

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type OperationTypeEnum string

const (
	OperationTypeEnumDEPOSIT  OperationTypeEnum = "DEPOSIT"
	OperationTypeEnumWITHDRAW OperationTypeEnum = "WITHDRAW"
)

func (e *OperationTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OperationTypeEnum(s)
	case string:
		*e = OperationTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for OperationTypeEnum: %T", src)
	}
	return nil
}

type NullOperationTypeEnum struct {
	OperationTypeEnum OperationTypeEnum
	Valid             bool // Valid is true if OperationTypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOperationTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.OperationTypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OperationTypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOperationTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OperationTypeEnum), nil
}

type Transaction struct {
	TransactionID pgtype.UUID
	WalletID      pgtype.UUID
	OperationType OperationTypeEnum
	Amount        float64
	Timestamp     pgtype.Timestamptz
}
